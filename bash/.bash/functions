#!/usr/bin/env bash

# git init with a .gitignore from the template in ~/.git_template/info/exclude
gi() {
	git init

	# git init hack to always have a .gitignore file since I forget to edit .git/info/exclude
	cat ./.git/info/exclude >> ./.gitignore
}

# git commit with commit message in vim or with a simple string as $1
# Parameter: Optional commit message
# Returns: None
gc() {
	if [[ -z $1 ]]; then
		git commit --verbose
	else
		git commit -m "$1"
	fi
}

# Load a new tmux session from template $2 called $1 via tmuxp
tp() {
	if [ $# -lt 2 ] || [ $# -gt 2 ]; then
		echo "Create a new tmux session as"
		echo "\$ tp sessionName tmuxpTemplate"
		return
	fi

	# Open a new session via tmuxp
	TMUXP_SESSION_NAME="$1" tmuxp load "$2"
	unset TMUXP_SESSION_NAME
}

# Handy Extract Program
extract() {
    if [ -f "$1" ] ; then
        case $1 in
            "*.tar.bz2")   tar xvjf "$1"     ;;
            "*.tar.gz")    tar xvzf "$1"     ;;
            "*.bz2")       bunzip2 "$1"      ;;
            "*.rar")       unrar x "$1"      ;;
            "*.gz")        gunzip "$1"       ;;
            "*.tar")       tar xvf "$1"      ;;
            "*.tbz2")      tar xvjf "$1"     ;;
            "*.tgz")       tar xvzf "$1"     ;;
            "*.zip")       unzip "$1"        ;;
            "*.Z")         uncompress "$1"   ;;
            "*.7z")        7z x "$1"         ;;
            "*")           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# FZF integration
# Source: https://github.com/junegunn/dotfiles/blob/master/bashrc

is_in_git_repo() {
	git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
	fzf --height 50% "$@" --border
}

# Git branch list
gbl() {
	is_in_git_repo || return
	git branch -a --color=always | grep -v '/HEAD\s' | sort |
	fzf-down --ansi --multi --tac --preview-window right:70% \
	--preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
	sed 's/^..//' | cut -d' ' -f1 |
	sed 's#^remotes/##'
}

# Git commit browser
gcb() {
	git log --graph --color=always \
		--format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
	fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
		--header "Press CTRL-S to toggle sort" \
		--preview "echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 |
			xargs -I % sh -c 'git show --color=always % | head -200 '" \
		--bind "enter:execute:echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 |
			xargs -I % sh -c 'vim fugitive://\$(git rev-parse --show-toplevel)/.git//% < /dev/tty'"
}

# Git checkout branch/tag
gco() {
	local tags branches target
	tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
	branches=$(
		git branch --all | grep -v HEAD             |
		sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
		sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
	target=$(
		(echo "$tags"; echo "$branches") | sed '/^$/d' |
		fzf-down --no-hscroll --reverse --ansi +m -d "\\t" -n 2 -q "$*") || return
	git checkout "$(echo "$target" | awk '{print $2}')"
}

# Search ctags and open in $EDITOR
ftags() {
	local line
	[ -e tags ] &&
	line=$(
	awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
	cut -c1-$COLUMNS | fzf --nth=2 --tiebreak=begin
	) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
			-c "silent tag $(cut -f2 <<< "$line")"
}
