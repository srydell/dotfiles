# cmake.snippets - Snippets for cmake file type

snippet if "if statement" b
if(${1:ON})
	${0:${VISUAL}}
endif()
endsnippet

snippet target "A full target (executable or library)" b
add_${2:executable}(${3:executable_name} ${4:${5:main}.cpp})
target_link_libraries($3 PRIVATE project_warnings project_options)
set_target_properties($3
                      PROPERTIES CXX_STANDARD_REQUIRED ON
                                 CXX_EXTENSIONS OFF)
endsnippet

snippet aex "add_executable(...)" b
add_library(${1:target_name} ${2:sources})$0
endsnippet

snippet alib "add_library(...)" b
add_library(${1:library_name} ${2:sources})$0
endsnippet

snippet alibv "Add library versioning" b
# The SOVERSION is used by linkers,
# should be the major version in semantic versioning
set_target_properties(${1:library_name}
                      PROPERTIES SOVERSION
                                 `!p
if t[2]:
    snip.rv = t[2]
else:
    snip.rv = ""`
                                 VERSION
                                 ${2:1}.${3:0}.${4:0})$0
endsnippet

snippet asub "add_subdirectory(...)" b
add_subdirectory(${1:sub_directory})$0
endsnippet

snippet asubg "add_subdirectory(...) with guard" b
if(NOT TARGET ${1:target_name})
	add_subdirectory(${2:sub_directory})$0
endif()
endsnippet

snippet atest "add_test(...)" b
add_test(NAME ${1:test_name} COMMAND ${2:how_to_run})$0
endsnippet

snippet ainterface "add_library(... INTERFACE lib_a lib_b)" b
add_library(${1:library_name} INTERFACE)
target_link_libraries($1 INTERFACE 
	${2:lib_a}
	${3:lib_b}
)$0
endsnippet

snippet acustomscript "Append to CMAKE_MODULE_PATH" b
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/${1:cmake}")$0
endsnippet

snippet tlinklib "target_link_libraries(...)" b
target_link_libraries(${1:target_name} ${2:PRIVATE} ${3:library_name})$0
endsnippet

snippet tincdir "target_include_directories(...)" b
target_include_directories(${1:target_name} ${2:PRIVATE} ${3:dir_name})$0
endsnippet

snippet func "simple function" b
function(${1:function_name} ${2:args})
  ${0:${VISUAL}}
endfunction()
endsnippet

snippet fnc "function" b
function(${1:function_name})
  # Define the supported set of keywords
  set(prefix ${2:ARG})
  set(noValues ${3:ENABLE_STUFF})
  set(singleValues ${4:TARGET})
  set(multiValues ${5:SOURCES})
  # Process the arguments passed in
  # can be used e.g. via $2_TARGET
  cmake_parse_arguments(${prefix}
                        "${noValues}"
                        "${singleValues}"
                        "${multiValues}"
                        ${ARGN})
  ${0:${VISUAL}}
endfunction()
endsnippet

snippet m "message" b
message(${1:STATUS} "${2:${VISUAL}}")$0
endsnippet

snippet runpython "Setup and run a python custom target" b
# Generate helpers for the tests
find_package(Python REQUIRED)
add_custom_target(
  ${1:target_name} ALL
  WORKING_DIRECTORY ${2:${CMAKE_CURRENT_SOURCE_DIR}}
  COMMAND ${Python_EXECUTABLE} ${3:path/to/python.py}
  COMMENT
    "Running command: ${Python_EXECUTABLE} $2/$3"
  )
add_dependencies(${4:target_built_after_$1} $1)$0
endsnippet

snippet fdecl "FetchContent_Declare" b
FetchContent_Declare(
	${1:contentName}
	GIT_REPOSITORY ${2:https://github.com/${3:srydell/dotfiles}}
	GIT_TAG        ${4}
)$0
endsnippet

snippet fgprop "FetchContent_GetProperties" b
FetchContent_GetProperties(${1:contentName})$0
if(NOT $1_POPULATED)
	FetchContent_Populate($1)

	# Add the downloaded directories
	add_subdirectory(${$1_SOURCE_DIR} ${$1_BINARY_DIR})
endif()
endsnippet

snippet install "Create an install config for a target" b
include(CMakePackageConfigHelpers)
# To help with tooling trying to link our library
write_basic_package_version_file(
    ${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${0.0.1}
    COMPATIBILITY SameMajorVersion
)

include(GNUInstallDirs)
# Where to install
set(${PROJECT_NAME}_INSTALL_CMAKEDIR
        ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
        CACHE STRING “Path to ${PROJECT_NAME} cmake files”
   )

# Install our cmake files
install(FILES
        ${PROJECT_NAME}Config.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKEDIR}
)

# What target to install
install(TARGETS ${1:target_to_install}
        EXPORT ${PROJECT_NAME}_Targets
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
                COMPONENT ${PROJECT_NAME}_RunTime
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
                COMPONENT ${PROJECT_NAME}_RunTime
                NAMELINK_COMPONENT ${PROJECT_NAME}_Development
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
                COMPONENT ${PROJECT_NAME}_Development)

# How to export the target to find_package users
# NOTE: Should export an alias of your lib in the same way so
#       the project can be used with add_subdirectory exactly
#       the same as find_package
install(EXPORT ${PROJECT_NAME}_Targets
        DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKEDIR}
        NAMESPACE ${PROJECT_NAME}::
        FILE ${PROJECT_NAME}-Targets.cmake
        COMPONENT ${PROJECT_NAME}_Development)

# To avoid RPATH/RUNPATH on unix
# Not finding dependencies of dependencies
if(NOT APPLE)
    set(CMAKE_INSTALL_RPATH $ORIGIN)
endif()$0
endsnippet

# Skeletons
snippet _skel "Skeleton for a cmake script file" b
include_guard()

$0
endsnippet
