# cmake.snippets - Snippets for cmake file type

snippet if "if statement" b
if(${1:ON})
	${0:${VISUAL}}
endif()
endsnippet

snippet target "A full target (executable or library)" b
add_${2:executable}(${3:executable_name} ${4:${5:main}.cpp})
target_compile_options($3 PRIVATE ${_warnings} ${_extra_warnings})
set_target_properties($3
                      PROPERTIES CXX_STANDARD ${6:17}
                                 CXX_STANDARD_REQUIRED ON
                                 CXX_EXTENSIONS OFF)
endsnippet

snippet aex "add_executable(...)" b
add_library(${1:target_name} ${2:sources})$0
endsnippet

snippet alib "add_library(...)" b
add_library(${1:library_name} ${2:sources})$0
endsnippet

snippet asub "add_subdirectory(...)" b
add_subdirectory(${1:sub_directory})$0
endsnippet

snippet asubg "add_subdirectory(...) with guard" b
if(NOT TARGET ${1:target_name})
	add_subdirectory(${2:sub_directory})$0
endif()
endsnippet

snippet atest "add_test(...)" b
add_test(NAME ${1:test_name} COMMAND ${2:how_to_run})$0
endsnippet

snippet ainterface "add_library(... INTERFACE lib_a lib_b)" b
add_library(${1:library_name} INTERFACE)
target_link_libraries($1 INTERFACE 
	${2:lib_a}
	${3:lib_b}
)$0
endsnippet

snippet acustomscript "Append to CMAKE_MODULE_PATH" b
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/${1:cmake}")$0
endsnippet

snippet tlinklib "target_link_libraries(...)" b
target_link_libraries(${1:target_name} ${2:PRIVATE} ${3:library_name})$0
endsnippet

snippet tincdir "target_include_directories(...)" b
target_include_directories(${1:target_name} ${2:PRIVATE} ${3:dir_name})$0
endsnippet

snippet fnc "function" b
function(${1:function_name} ${2:args})
	${0:${VISUAL}}
endfunction($1)
endsnippet

snippet m "message" b
message(${1:STATUS} "${2:${VISUAL}}")$0
endsnippet

snippet fdecl "FetchContent_Declare" b
FetchContent_Declare(
	${1:contentName}
	GIT_REPOSITORY ${2:https://github.com/${3:srydell/dotfiles}}
	GIT_TAG        ${4}
)$0
endsnippet

snippet fgprop "FetchContent_GetProperties" b
FetchContent_GetProperties(${1:contentName})$0
if(NOT $1_POPULATED)
	FetchContent_Populate($1)

	# Add the downloaded directories
	add_subdirectory(${$1_SOURCE_DIR} ${$1_BINARY_DIR})
endif()
endsnippet

snippet _skel "Skeleton for a cmake script file" b
include_guard()

$0
endsnippet

# Skeletons
snippet _cmakelists "Skeleton for files called CMakeLists.txt" b
cmake_minimum_required(VERSION `cmake --version | head -n 1 | sed 's/[ a-z]//g' | cut -d '.' -f1-2`)

project(${1:project_name} VERSION 0.1 LANGUAGES CXX)

# Export compile flags to compile_commands.json database. Useful for linters and
# autocompletion
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# If no build type is provided explicitly, set it to Release
if(NOT EXISTS ${CMAKE_BINARY_DIR}/CMakeCache.txt)
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
  endif()
endif()

# Add custom scripts
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

`mkdir cmake && echo 'include_guard()

# Set variable with warning flags for different compilers
if("${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC")
  set(_warnings
      /W4
      /WX
      /permissive-
      /w14640)
  set(_extra_warnings
      /w14242
      /w14254
      /w14263
      /w14265
      /w14287
      /we4289
      /w14296
      /w14311
      /w14545
      /w14546
      /w14547
      /w14549
      /w14555
      /w14619
      /w14826
      /w14905
      /w14906
      /w14928)
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
  set(_warnings
      -W
      -Wall
      -Werror
      -Wextra
      -Wnon-virtual-dtor
      -Wshadow
      -pedantic)
  set(_extra_warnings
      -Wcast-align
      -Wconversion
      -Wdate-time
      -Wdouble-promotion
      -Wduplicated-cond
      -Wformat=2
      -Wlogical-op
      -Wmisleading-indentation
      -Wnull-dereference
      -Wold-style-cast
      -Woverloaded-virtual
      -Wsign-conversion
      -Wunused
      -Wuseless-cast)
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  set(_warnings
      -W
      -Wall
      -Werror
      -Wextra
      -Wnon-virtual-dtor
      -Wshadow
      -pedantic)
  set(_extra_warnings
      -Wcast-align
      -Wconversion
      -Wdate-time
      -Wdouble-promotion
      -Wduplicate-enum
      -Wformat=2
      -Wnull-dereference
      -Wold-style-cast
      -Woverloaded-virtual
      -Wsign-conversion
      -Wunused)
endif()' >> cmake/SetupWarnings.cmake`
# Define _warnings and _extra_warnings variables
include(SetupWarnings)

add_${2:executable}(${3:executable_name} ${4:${5:main}.cpp})
target_compile_options($3 PRIVATE ${_warnings} ${_extra_warnings})
set_target_properties($3
                      PROPERTIES CXX_STANDARD ${6:17}
                                 CXX_STANDARD_REQUIRED ON
                                 CXX_EXTENSIONS OFF)

option(BUILD_TESTING "Build the testing tree" ON)
if(BUILD_TESTING AND (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR))
  # TODO: Add tests
  # include(CTest)
  # add_executable(${7:testapp} ${8:${9:testapp}.cpp})
  # add_test(NAME ${10:test} COMMAND $7)
endif()$0

option(BUILD_BENCHMARKS "Build the benchmarks" ON)
if(BUILD_BENCHMARKS AND (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR))
  # TODO: Add benchmarks
endif()
endsnippet
