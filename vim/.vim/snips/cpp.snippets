# cpp.snippets - Snippets for cpp file type

extends c

###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3], snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:void} ${2:FunctionName}(${3:param}) {
	${0:${VISUAL:}}
}
endsnippet

snippet cout "Print output" b
std::cout << ${0:${VISUAL:"output"}} << "\n";
endsnippet

snippet forin "for in container" b
for (${3:auto}& ${1:value} : ${2:container}) {
	$0
}
endsnippet

snippet forline "for line in stream" b
for (string ${1:line}; std::getline(${2:std::cin}, $1);) {
	${3:${VISUAL:}}
}
endsnippet

snippet if "Simple if statement" b
if (${1:0 == 0}) {
	${0:${VISUAL:}}
}
endsnippet

snippet ifreg "If regex match" b
std::smatch ${1:matches};
if (std::regex_search(${2:string}, $1, ${3:pat})) {
	${3:${VISUAL:}}
}
endsnippet

snippet inc "#include statement" b
#include ${1:<${2:vector}>}$0
endsnippet

snippet regex "Regex pattern" b
std::regex ${1:pattern} {R"(${2:${VISUAL:pat}})"};
endsnippet

# Skeletons
snippet _header "Header skeleton file" b
#ifndef `!v toupper(expand("%:t:r"))`_H
#define `!v toupper(expand("%:t:r"))`_H

${0}

#endif
endsnippet
