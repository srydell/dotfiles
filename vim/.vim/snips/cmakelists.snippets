# cmakelists.snippets - Snippets for cmakelists file type
# NOTE: This is a made up filetype and should only have specialized snippets

snippet mod_cath2 "Setup and include catch2 module" b
`mkdir cmake || test ! -f cmake/Catch2Helpers.cmake && cp ~/.vim/integrations/templates/cmake/Catch2Helpers.cmake cmake/Catch2Helpers.cmake`# Define create_catch2_test
include(Catch2Helpers)
find_package(Catch2 REQUIRED)
# NOTE: Depends on find_package(catch2) being found
create_catch2_test(TARGET
                   ${1:catch2_test}
                   SOURCES
                   ${2:test/${3:catch2_test}.cpp})$0
endsnippet

snippet mod_conan "Setup and include conan module" b
`mkdir cmake || test ! -f cmake/SetupConan.cmake && cp ~/.vim/integrations/templates/cmake/SetupConan.cmake cmake/SetupConan.cmake`# Define get_conan_helper
include(SetupConan)
get_conan_helper()
# Require that conan is installed
conan_check(REQUIRED)
${1:conan_setup_remotes()}
# Install dependencies (defined in conanfile.{txt,py})
conan_cmake_run(CONANFILE
                conanfile.${2:txt}
                BASIC_SETUP
                CONAN_COMMAND
                ${CONAN_CMD}
                CMAKE_TARGETS
                BUILD
                missing)
`!p
if t[2] == "txt":
    snip.rv = "# Needed when using conanfile.txt and find_package.\n# Relies on cmake_paths generator\ninclude(${CMAKE_BINARY_DIR}/conan_paths.cmake)"
else:
    snip.rv = ""`$0
endsnippet

snippet mod_targetHelpers "Module for creating targets" b
`mkdir cmake || test ! -f cmake/TargetHelpers.cmake && cp ~/.vim/integrations/templates/cmake/TargetHelpers.cmake cmake/TargetHelpers.cmake`
include(TargetHelpers)

create_target(TARGET
              ${1:target_name}
              ${2:IS_LIBRARY}
              SOURCES
              ${3:src/${4:main}.cpp}
              INCLUDE
              ${5:include}
              LINK_LIBRARIES
              project_warnings
              project_options
              ${6:ExternalLib})
endsnippet

# Skeletons
snippet _cmakelists "Skeleton for files called CMakeLists.txt" b
cmake_minimum_required(VERSION `cmake --version | head -n 1 | sed 's/[ a-z]//g' | cut -d '.' -f1-2`)

project(${1:`!v split(getcwd(), '/')[-1] " Directory name`} VERSION 0.1 LANGUAGES CXX)

# Export compile flags to compile_commands.json database. Useful for linters and
# autocompletion
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Use ccache if available
find_program(CCACHE ccache)
if(CCACHE)
  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})
endif()

# If no build type is provided explicitly, set it to Release
if(NOT EXISTS ${CMAKE_BINARY_DIR}/CMakeCache.txt)
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
  endif()
endif()

# Add custom scripts
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
`mkdir cmake || test ! -f cmake/WarningsAndOptions.cmake && cp ~/.vim/integrations/templates/cmake/WarningsAndOptions.cmake cmake/WarningsAndOptions.cmake`
# Define project_warnings and project_options targets
include(WarningsAndOptions)

add_${2:executable}(${3:$1} ${4:src/${5:main}.cpp})
target_link_libraries($3
                      PRIVATE project_warnings project_options)
set_target_properties($3
                      PROPERTIES
                      CXX_STANDARD_REQUIRED
                      ON
                      CXX_EXTENSIONS
                      OFF
                      CXX_STANDARD
                      ${4:17})$0

# Only build tests and benchmarks if building this project directly
if(PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  option(ENABLE_TESTING "Build the testing tree" OFF)
  if(ENABLE_TESTING)
    # enable_testing()
    # add_subdirectory(tests)
    # TODO: Add benchmarks
  endif()

  option(ENABLE_BENCHMARKS "Build the benchmarks" OFF)
  if(ENABLE_BENCHMARKS)
    # TODO: Add benchmarks
  endif()
endif()
endsnippet
