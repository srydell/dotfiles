# catch2.snippets - Snippets for catch2 file type

snippet c "CHECK: Report on fail but continue" "snip.visual_text" be
CHECK(${1:${VISUAL:}});$0
endsnippet

snippet c "CHECK: Report on fail but continue" b
CHECK(${1:1 == 1});$0
endsnippet

snippet r "REQUIRE: Report on fail and stop" "snip.visual_text" be
REQUIRE(${1:${VISUAL:}});$0
endsnippet

snippet r "REQUIRE: Report on fail and stop" b
REQUIRE(${1:1 == 1});$0
endsnippet

snippet rthat "REQUIRE_THAT" "snip.visual_text" be
REQUIRE_THAT(${1:${VISUAL:}});$0
endsnippet

snippet rthat "REQUIRE_THAT" b
REQUIRE_THAT(${1:1 == 1});$0
endsnippet

snippet i "INFO: Log on failure" b
INFO("$1");$0
endsnippet

snippet cap "CAPTURE: Log a variable on failure" b
CAPTURE(${1:varName});$0
endsnippet

snippet s "SECTION" "snip.visual_text" be
SECTION("${1:Description of what will happen}") {
	${0:${VISUAL:}}
}
endsnippet

snippet s "SECTION" b
SECTION("${1:Description of what will happen}") {
	$0
}
endsnippet

snippet test "Test case" b
TEST_CASE("${1:Brief about the test}", "[${2:`!v expand('%:t:r') " filename without extension`}]") {
	$0
}
endsnippet

snippet _test "Test skeleton for catch2" b
#include "${1:`!p
import pathlib
for headerLocation in ["include/", "src/"]:
    for header in pathlib.Path(headerLocation).glob("**/*.hpp"):
        currentFilenameStem = fn.split('.')[0]
        if currentFilenameStem in header.stem:
            # Found a header file with the same name as the test file.
            # It should probably be included
            snip.rv = str(header.relative_to(headerLocation))
`}"
#include <catch2/catch.hpp>

TEST_CASE("${2:Brief about the test}", "[${3:`!p snip.rv = fn.split('.')[0]`}]") {
	$0
}
endsnippet
